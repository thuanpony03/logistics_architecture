version: '3.8'
services:
  # ZooKeeper service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - app-tier

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - app-tier

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_PASSWORD=ponydasierra
    ports:
      - "8123:8123"   # HTTP port
      - "9999:9999"   # Native port
      - "9009:9009"   # Inter-server port
    volumes:
      - ./clickhouse-data:/var/lib/clickhouse
      - ./clickhouse-logs:/var/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - app-tier


  grafana:
      image: grafana/grafana:latest
      container_name: grafana
      ports:
        - "3000:3000"
      environment:
        - GF_SECURITY_ADMIN_USER=admin
        - GF_SECURITY_ADMIN_PASSWORD=admin        # Password mặc định
        - GF_AUTH_ANONYMOUS_ENABLED=true
        - GF_AUTH_BASIC_ENABLED=true
        - GF_INSTALL_PLUGINS=grafana-clickhouse-datasource
      volumes:
        - ./grafana-data:/var/lib/grafana
      networks:
        - app-tier


  # MySQL service
  mysql:
    image: mysql:8.0.40
    container_name: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ponydasierra
      MYSQL_DATABASE: db_logistics
      MYSQL_USER: debezium
      MYSQL_PASSWORD: ponydasierra
      MYSQL_ROOT_HOST: '%'
    volumes:
      - mysql-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password    # Fixed syntax here
    networks:
      - app-tier


#  minio:
#      image: minio/minio:latest
#      container_name: minio
#      ports:
#        - "9002:9002"
#        - "9001:9001"
#      environment:
#        MINIO_ROOT_USER: thuanpony03
#        MINIO_ROOT_PASSWORD: ponydasierra
#      command: server --console-address ":9001" /data
#      volumes:
#        - minio-data:/data
#      networks:
#        - app-tier
#
  # Kafka Connect with Debezium
#  kafka-connect:
#    image: debezium/connect:2.3
#    container_name: kafka-connect
#    depends_on:
#      - kafka
#      - mysql
#      - minio
#    ports:
#      - "8083:8083"
#    environment:
#      GROUP_ID: 1
#      BOOTSTRAP_SERVERS: kafka:29092
#      CONFIG_STORAGE_TOPIC: connect_configs
#      OFFSET_STORAGE_TOPIC: connect_offsets
#      STATUS_STORAGE_TOPIC: connect_statuses
#      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
#      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
#      # Thêm timestamp và user
#      CONNECT_CONFIG_TIMESTAMP: "2025-01-01T07:30:33Z"
#      CONNECT_USER: "thuanpony03"
#
#    volumes:
#      - ./kafka/plugins:/kafka/connect/plugins
#    networks:
#      - app-tier

  # Kafka Connect with Debezium and HDFS Connector
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.3.0
    container_name: kafka-connect
    depends_on:
      - kafka
      - mysql
      - namenode
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_GROUP_ID: 1
      CONNECT_CONFIG_STORAGE_TOPIC: connect_configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect_offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/connectors"
      CONNECT_HDFS_URL: "hdfs://namenode:9000"
      CONNECT_HADOOP_CONF_DIR: "/etc/hadoop/conf"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
    volumes:
      - ./kafka/connectors:/etc/kafka-connect/connectors
      - ./hadoop/core-site.xml:/etc/hadoop/conf/core-site.xml
      - ./hadoop/hdfs-site.xml:/etc/hadoop/conf/hdfs-site.xml
    networks:
      - app-tier

# Kafka Connect with Debezium and HDFS Connector
#  kafka-connect:
#    image: debezium/connect:2.3
#    container_name: kafka-connect
#    depends_on:
#      - kafka
#      - mysql
#      - namenode
#    ports:
#      - "8083:8083"
#    environment:
#      GROUP_ID: 1
#      BOOTSTRAP_SERVERS: kafka:29092
#      CONFIG_STORAGE_TOPIC: connect_configs
#      OFFSET_STORAGE_TOPIC: connect_offsets
#      STATUS_STORAGE_TOPIC: connect_statuses
#      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
#      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
#      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/connectors"
#      CONNECT_HDFS_URL: "hdfs://namenode:9000"
#      CONNECT_HADOOP_CONF_DIR: "/etc/hadoop/conf"
#      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
#    volumes:
#      - ./kafka/connectors:/etc/kafka-connect/connectors
#      - ./hadoop/core-site.xml:/etc/hadoop/conf/core-site.xml
#      - ./hadoop/hdfs-site.xml:/etc/hadoop/conf/hdfs-site.xml
#    networks:
#      - app-tier
  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - kafka-connect
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: local-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - app-tier

  # Hadoop NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - "50070:50070"
    networks:
      - app-tier

  # Hadoop DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - "50075:50075"
    networks:
      - app-tier
    depends_on:
      - namenode

# Spark Master
  spark-master:
    image: bitnami/spark:3.4.0
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "8181:8181"
      - "7077:7077"
    networks:
      - app-tier

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.4.0
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_PORT=8081
    ports:
      - "8081:8081"
    networks:
      - app-tier
    depends_on:
      - spark-master

#  # PySpark (without Jupyter)
#  pyspark:
#    image: bitnami/spark:3
#    container_name: pyspark
#    ports:
#      - "4040:4040"
#    volumes:
#      - ./python_scripts:/opt/spark/work-dir
#    environment:
#      SPARK_MASTER: local[*]
#      SPARK_DRIVER_MEMORY: "1g"
#      SPARK_EXECUTOR_MEMORY: "1g"
#    command: sleep infinity  # Giữ container chạy
#    networks:
#      - app-tier

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  mysql-data:
  clickhouse-data:
  clickhouse-logs:
  grafana-data:
  hadoop_namenode:
  hadoop_datanode:
  minio-data:

networks:
  app-tier:
    driver: bridge
